#include "SerialStepper.h"
#include "mcp23017stepper.h"
//#include "pcf8574stepper.h"
//#include "arduinostepper.h"
//#include "shiftregstepper.h"
#include <Wire.h>
#include <AccelStepper.h>
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <PubSubClient.h>

#include <Ota.h>

static const char* const ssid = "spelemann2";
static const char* const password = "konnefin";

static const char* const mqtt_server = "moxon"; // Raspberry PI
static const char* const mqtt_topic  = "Stepper/in";
static const int mqtt_port = 1883;

WiFiClient wifi_client;
PubSubClient client(wifi_client);

// Make a Mcp23017StepperControl on i2c address 0x20
//Pcf8574StepperControl pcf8574;
Mcp23017StepperControl mcp23017(0x20);
//Mcp23017StepperControl mcp23017_2(0x21);

//ArduinoStepperControl arduino(10, 11, 12, 13);

// Make a ShiftregStepperControl on pins 10, 11, 12
// (ser, latch, clock)
//ShiftregStepperControl shift_reg(10, 11, 12);

// loopClock::Timer clk1, clk2, clk3;

Stepper stp0(mcp23017);
Stepper stp1(mcp23017);
Stepper stp2(mcp23017);
Stepper stp3(mcp23017);
// Stepper stp5(mcp23017_2);
// Stepper stp6(mcp23017_2);
// Stepper stp7(mcp23017_2);

Stepper* steppers[] = {&stp0, &stp1, &stp2, &stp3};


// For the AccelSteppers, define two functions to forward
// and backward step a Stepper
void forward(Stepper& stepper) {
  stepper.speed(0);
  stepper.steps(1);
  stepper.advance(Stepper::Direction::FORWARD);
}

void backward(Stepper& stepper) {
  stepper.speed(0);
  stepper.steps(1);
  stepper.advance(Stepper::Direction::BACKWARD);
}

// Turn Steppers stp1 and stp2 into AccelSteppers using the two functions
// AccelStepper stepper1([&](){forward(stp1);}, [&](){backward(stp1);});
// AccelStepper stepper2([&](){forward(stp2);}, [&](){backward(stp2);});
// AccelStepper stepper3([&](){forward(stp3);}, [&](){backward(stp3);});

void mqttConnect(PubSubClient client) {
  if (!client.connected()) {
    // Attempt to connect
    if (client.connect((WiFi.localIP().toString().c_str()))) {
      client.subscribe(mqtt_topic);
      delay(5);
    }
    else {
      // Wait 0.05 seconds before retrying
      delay(5);
    }
  }
}

int parsePayload(char* pl, int& idx, float& speed) {
  return sscanf(pl, "\"idx\" = %d, \"speed\" = %f",
                &idx, &speed);
}

void runStepper(int idx, float speed) {
  if (0 <= idx && idx < 4) {
    if (speed == 0) {
      steppers[idx]->stop();
      return;
    }
    steppers[idx]->direction(speed < 0 ?
                             Stepper::BACKWARD : Stepper::FORWARD);
    float rpm = (speed < 0 ? -speed : speed) * 15;
    steppers[idx]->speed(rpm);
    steppers[idx]->start();
  }
}


void stepperCallback(char*, byte* payload, unsigned int len) {
  char pl[128];
  for (char* p = pl ;len--;) {
    *p++ = *payload++;
    *p = 0;
  }
  int idx;
  float speed;
  if (parsePayload(pl, idx, speed) == 2) {
    runStepper(idx, speed);
  }
}


void mqttSetup() {
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(stepperCallback);
}



void setup() {
  // Initialize libraries
  Serial.begin(115200);
  Wire.begin(0, 2);

  // Initialize the stepper motor controllers
  mcp23017.begin();
//  mcp23017_2.begin();
//  pcf8574.begin();
//  shift_reg.begin();
//  arduino.begin();

  // Initialize and set first targets for the AccelSteppers
  // stepper1.setMaxSpeed(500);
  // stepper1.setAcceleration(300.0);
  // stepper1.moveTo(2048);

  // stepper2.setMaxSpeed(600);
  // stepper2.setAcceleration(100.0);
  // stepper2.moveTo(10000000);

  // stepper3.setMaxSpeed(600);
  // stepper3.setAcceleration(100.0);
  // stepper3.moveTo(10000000);

//  stp1.speed(8);
  // stp2.speed(8);
  // stp4.speed(0);
  // stp3.speed(10);
  // stp3.start();
  // stp4.start();
  // stp2.direction(Stepper::Direction::BACKWARD);
  // Serial.println("Starting stepper motors");
  WifiConnect(ssid, password);
  OtaSetup();
  mqttSetup();
//  stp1.turn(10);
}

void runner() {
  loopClock::tick();
  mqttConnect(client);

  // Update the AccelSteppers
  // stepper1.run();
  // stepper2.run();
  // stepper3.run();

  mcp23017.run();
  // Update the clock and move the stepper if due
//  mcp23017_2.run();
//  pcf8574.run();
//  shift_reg.run();

  // check for ota sketch update
  client.loop();
  OtaLoop();
}


void loop() {
  runner();
  // // if (!stp1.running()) {
  // if (clk1.set(15)) {
  //   stp1.reverse();
  //   stp1.turn(1);
  // }
  // clk1.wait();


  //   // stepper1.moveTo(-stepper1.currentPosition());
  // }
  //     stp3.speed(0.5);
  //     if (stp2.running()) {
  //       stp1.reverse();
  //     }
  //     stp1.speed(4);
  //     stp1.turn(1.5);
  //   }
  // }
  // if (!stp2.running()) {
  //   clk2.set(6);
  //   stp2.speed(8);
  //   stp2.reverse();
  //   stp2.turn(2);
  // }
  // if (clk2.wait()) {
  //   stp3.speed(12);
  //   stp3.reverse();
  // }
  // // Ten seconds on, five seconds off
  // if (!stp4.running()) {
  //   if (clk3.wait()) {
  //     stp4.speed(10);
  //     stp4.start();
  //   }
  //   clk3.set(10);
  // }
  // else {
  //   if (clk3.wait()) {
  //     stp4.speed(0);
  //   }
  //   clk3.set(5);
  // }
}
