#include <SerialStepper.h>

#include <mcp23017stepper.h>

#ifdef ESP8266
#include <ESP8266WiFi.h>
#else
#include <WiFi.h>
#endif

#include <Wire.h>          // IÂ²C
#include <PubSubClient.h>  // Mqtt
#include <ArduinoOTA.h>    // Over The Air update

constexpr const char* ssid{"myNetname"};
constexpr const char* password{"myPassword"};

// Mqtt variables
WiFiClient wifi_client;
PubSubClient mqtt_client(wifi_client);
constexpr const char* mqtt_server{"myServer"};
constexpr const char* mqtt_in{"Stepper/in"};
constexpr const char* mqtt_out{"Stepper/out"};
constexpr int   mqtt_port{1883};

// Define the motors
Mcp23017StepperControl stepper_ctl;
Stepper stp0(stepper_ctl);
Stepper stp1(stepper_ctl);
Stepper stp2(stepper_ctl);
Stepper stp3(stepper_ctl);
// Enable referencing them as an array
constexpr Stepper* steppers[] = {&stp0, &stp1, &stp2, &stp3};
constexpr int nsteppers = sizeof(steppers)/sizeof(steppers[0]);
constexpr float max_speed = 15.0f; // rpm

// Set speed of stepper idx
void runStepper(int idx, float speed) {
  if (0 <= idx && idx < nsteppers) {
    if (speed == 0) {
      steppers[idx]->stop();
      return;
    }
    steppers[idx]->direction(
      speed < 0 ? Stepper::BACKWARD : Stepper::FORWARD);
    float rpm = std::abs(speed) * max_speed;
    steppers[idx]->speed(rpm);
    steppers[idx]->start();
  }
}

bool WifiConnect(const char* ssid, const char* password) {
  WiFi.mode(WIFI_STA);
  Serial.print("connecting to ");
  Serial.println(ssid);
  delay(1000);
  WiFi.begin(ssid, password);
  if (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(500);
    ESP.restart();
  }
  Serial.println("connected.");
}

void mqttConnect() {
  if (!mqtt_client.connected()) {
    Serial.print("MQTT state: ");
    Serial.println(mqtt_client.state());
    static const String client_id = WiFi.macAddress();
    if (mqtt_client.connect(client_id.c_str())) {
      mqtt_client.subscribe(mqtt_in);
      Serial.println("MQTT connected");
    }
    else {
      Serial.println("MQTT not connected");
      return;
    }
  }
  mqtt_client.loop();
  yield();
}

// Extract stepper index and speed from payload string
bool parsePayload(const char* pl, int& idx, float& speed) {
  return sscanf(pl, "{\"idx\":%d, \"speed\":%f}",
                &idx, &speed) == 2;
}

void mqttCallback(char* /* topic */,
                  uint8_t* pl,
                  unsigned int len) {
  String payload;
  payload.reserve(len+1);
  for (int l = len; l--; payload += static_cast<char>(*pl++)) {}
  int idx;
  float speed;
  if (parsePayload(payload.c_str(), idx, speed)) {
    // Set the stepper speed
    runStepper(idx, speed);
    // Echo the payload back to MQTT
    mqtt_client.publish(mqtt_out, payload.c_str());
  }
}

void mqttSetup() {
  mqtt_client.setServer(mqtt_server, mqtt_port);
  mqtt_client.setCallback(mqttCallback);
}

void setup() {
  // Initialize libraries
  Serial.begin(115200);
  Wire.begin(0, 2); // ESP-1
//  Wire.begin();

  // Initialize the stepper motor controller
  stepper_ctl.begin();

  // Initialize net
  WifiConnect(ssid, password);
  mqttSetup();
  ArduinoOTA.begin(true);
}

void loop() {
  loopClock::tick();

  // Handle MQTT
  mqttConnect();

  // Move the steppers if due time
  stepper_ctl.run();
  ArduinoOTA.handle();
  yield();
}
